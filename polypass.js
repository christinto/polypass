// Generated by CoffeeScript 1.4.0
var join, prime, split, toB64, txt_to_num;

prime = 5915587277;

txt_to_num = function(str) {
  var c, charset, i, index, max, result, _i, _len;
  charset = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-";
  max = str.length - 1;
  result = 0;
  for (i = _i = 0, _len = str.length; _i < _len; i = ++_i) {
    c = str[i];
    index = charset.indexOf(c);
    if (index < 0) {
      return null;
    }
    result += index * Math.pow(10, max - i);
  }
  return result;
};

split = function(number, available, needed) {
  var accum, c, coef, exp, shares, x, _i, _j, _k;
  coef = [];
  shares = [];
  coef[0] = number;
  for (c = _i = 1; _i < available; c = _i += 1) {
    coef[c] = Math.floor(Math.random() * prime);
  }
  for (x = _j = 0; _j <= available; x = _j += 1) {
    accum = coef[0];
    for (exp = _k = 1; _k < needed; exp = _k += 1) {
      accum += coef[exp] * Math.pow(x, exp);
    }
    shares[x] = [x, accum];
  }
  return shares;
};

join = function(shares) {
  var accum, count, denominator, formula, nextposition, numerator, startposition, value, _i, _j, _ref, _ref1;
  accum = 0;
  for (formula = _i = 0, _ref = shares.length; _i < _ref; formula = _i += 1) {
    numerator = denominator = 1;
    for (count = _j = 0, _ref1 = shares.length; _j < _ref1; count = _j += 1) {
      if (formula === count) {
        continue;
      }
      startposition = shares[formula][0];
      value = shares[formula][1];
      nextposition = shares[count][0];
      numerator *= -nextposition;
      denominator *= startposition - nextposition;
    }
    accum += ((value * numerator * 2) + 1) / (denominator * 2);
  }
  return Math.round(accum % prime);
};

toB64 = function(num) {
  var charset, out;
  charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  out = "";
  if (num === 0) {
    return "0";
  }
  while (num > 0) {
    out = charset.charAt(num % 64) + out;
    num = Math.floor(num / 64);
  }
  return out;
};
